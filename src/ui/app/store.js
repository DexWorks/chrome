/**
 * Internal data store for popup UI. A `model` property of this store
 * is generated by a host application store from backgraund page.
 * In extension environment, some actions (defined in `externalActions`) are
 * not dispatched to local store, but for local development they do
 */
'use strict';

import {createStore, applyMiddleware} from 'redux';
import createLogger from 'redux-logger';
import reducers from './reducers';
import {PAGE, REMOTE_VIEW} from '../../app/action-names';
import {MODEL} from './action-names';

const port = connectToApp();
const externalActions = new Set([
    PAGE.TOGGLE_ENABLED, PAGE.UPDATE_DIRECTION, PAGE.UPDATE_FILE_MAPPING,
    PAGE.ADD_USER_STYLESHEET, PAGE.REMOVE_USER_STYLESHEET,
    REMOTE_VIEW.SET_SESSION, REMOTE_VIEW.REMOVE_SESSION
]);

var enhancer = null;
var initialState = {
    model: {},
    ui: {
        remoteView: {
            messages: ['default']
        }
    }
};

if (!port) { // no port, local development
    initialState.model = {
        enabled: true,
        page: 'http://localhost:9000',
        origin: 'http://localhost:9000',
        direction: 'both',
        browserFiles: [
            'http://localhost:9000/css/main.css',
            'http://localhost:9000/css/module/form.css'
        ],
        editorFiles: [
            '/home/projects/foo/css/main.css',
            '/home/projects/foo/css/assets/form.css',
            '/home/projects/foo/css/assets/inner.css',
            '/home/projects/foo/css/assets/guides.css'
        ],
        userStylesheets: {},
        mapping: {
            'http://localhost:9000/css/module/form.css': '/home/projects/foo/css/assets/inner.css'
        },
        remoteView: {
            state: 'connected'
        }
    };
}

if (process.env.NODE_ENV !== 'production') {
    enhancer = applyMiddleware(createLogger());
}

const store = createStore(reducers, initialState, enhancer);

export function dispatch(data) {
    if (externalActions.has(data.type) && port) {
        return port.postMessage({action: 'store-update', data});
    }
    return store.dispatch(data);
}

export function subscribe(onChange, select) {
    let currentState;
    let handler = () => {
        let nextState = getState();
        if (typeof select === 'function') {
            nextState = select(nextState);
        } else if (typeof select === 'string') {
            // watching for a specific key in store
            nextState = getStateValue(select, nextState);
        }
        if (nextState !== currentState) {
            currentState = nextState;
            onChange(currentState);
        }
    };

    return store.subscribe(handler);
}

export function getState() {
    return store.getState();
}

export function getStateValue(key, state=getState()) {
    var ctx = state;
    var parts = key.split('.');
    while (parts.length) {
        let key = parts.shift();
        if (key in ctx) {
            ctx = ctx[key];
        } else {
            return undefined;
        }
    }

    return ctx;
}

function connectToApp() {
    try {
        var port = chrome.runtime.connect({name: 'popup'});
        port.onMessage.addListener(message => {
            if (message && message.action === 'model-update') {
                dispatch({
                    type: MODEL.UPDATE,
                    model: message.data
                });
            }
        });
        return port;
    } catch (e) {
        console.warn(e);
    }
}
